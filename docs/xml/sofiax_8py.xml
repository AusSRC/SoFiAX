<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="sofiax_8py" kind="file" language="Python">
    <compoundname>sofiax.py</compoundname>
    <innernamespace refid="namespacesrc_1_1sofiax">src::sofiax</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacesrc_1_1sofiax" refkind="compound"><highlight class="stringliteral">&quot;&quot;&quot;@package<sp/>sofiax</highlight></codeline>
<codeline lineno="2"><highlight class="stringliteral">Main<sp/>file<sp/>for<sp/>running<sp/>sofiax.</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral">SoFiAX<sp/>is<sp/>a<sp/>repository<sp/>of<sp/>code<sp/>to<sp/>take<sp/>outputs<sp/>of<sp/>SoFiA-2<sp/>and<sp/>store<sp/>the<sp/>content<sp/>in<sp/>databases.</highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>asyncio</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>asyncpg</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>logging</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>configparser</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>argparse</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>datetime<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>datetime</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacesrc_1_1schema" kindref="compound">src.schema</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Run,<sp/>Detection,<sp/>Instance</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacesrc_1_1merge" kindref="compound">src.merge</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>merge_match_detection</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacesrc_1_1utils_1_1io" kindref="compound">src.utils.io</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>_get_output_filename,<sp/>\</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>_parse_sofia_param_file,<sp/>_get_from_conf,<sp/>_get_parameter,<sp/>\</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>_get_fits_header_property</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacesrc_1_1utils_1_1sql" kindref="compound">src.utils.sql</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>db_run_upsert,<sp/>db_instance_upsert</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">async<sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacesrc_1_1sofiax_1a651b74a81a506572fda097c8fa9ed32d" kindref="member">run</ref>(config,<sp/>run_name,<sp/>param_path,<sp/>sanity):</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Run<sp/>SoFiAX<sp/>and/or<sp/>SoFiA<sp/>and<sp/>write<sp/>to<sp/>database.</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run_name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param_path<sp/>(str)<sp/><sp/><sp/><sp/>-<sp/>String<sp/>for<sp/>the<sp/>path<sp/>for<sp/>the<sp/>SoFiA<sp/>parameter</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sanity<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>database<sp/>credentials<sp/>from<sp/>config</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>conf<sp/>=<sp/>config[</highlight><highlight class="stringliteral">&apos;SoFiAX&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>host<sp/>=<sp/>conf[</highlight><highlight class="stringliteral">&apos;db_hostname&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>conf[</highlight><highlight class="stringliteral">&apos;db_name&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>username<sp/>=<sp/>conf[</highlight><highlight class="stringliteral">&apos;db_username&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>password<sp/>=<sp/>conf[</highlight><highlight class="stringliteral">&apos;db_password&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>execute_sofia<sp/>=<sp/>bool(int(conf[</highlight><highlight class="stringliteral">&apos;sofia_execute&apos;</highlight><highlight class="normal">]))</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>path<sp/>=<sp/>conf[</highlight><highlight class="stringliteral">&apos;sofia_path&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>logging.info(f</highlight><highlight class="stringliteral">&apos;Processing<sp/>{param_path}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>params<sp/>=<sp/>await<sp/>_parse_sofia_param_file(param_path)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>cwd<sp/>=<sp/>os.path.dirname(os.path.abspath(param_path))</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO(austin):<sp/>the<sp/>params<sp/>file<sp/>allows<sp/>for<sp/>the<sp/>specification<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>an<sp/>output<sp/>directory.<sp/>This<sp/>needs<sp/>to<sp/>be<sp/>included<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>output_filename<sp/>=<sp/>_get_output_filename(params,<sp/>cwd)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>NOTE:<sp/>SoFiA-2<sp/>can<sp/>be<sp/>run<sp/>without<sp/>the<sp/>boundary<sp/>specified.<sp/>if<sp/>the<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>is<sp/>none<sp/>then<sp/>we<sp/>need<sp/>to<sp/>get<sp/>the<sp/>boundary<sp/>from<sp/>the<sp/>input<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>params[</highlight><highlight class="stringliteral">&apos;input.region&apos;</highlight><highlight class="normal">].strip():</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_file<sp/>=<sp/>_get_parameter(</highlight><highlight class="stringliteral">&apos;input.data&apos;</highlight><highlight class="normal">,<sp/>params,<sp/>cwd)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundary<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>int(_get_fits_header_property(input_file,<sp/></highlight><highlight class="stringliteral">&apos;NAXIS1&apos;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>int(_get_fits_header_property(input_file,<sp/></highlight><highlight class="stringliteral">&apos;NAXIS2&apos;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>int(_get_fits_header_property(input_file,<sp/></highlight><highlight class="stringliteral">&apos;NAXIS3&apos;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundary<sp/>=<sp/>[int(i)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>params[</highlight><highlight class="stringliteral">&apos;input.region&apos;</highlight><highlight class="normal">].split(</highlight><highlight class="stringliteral">&apos;,&apos;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Connect<sp/>to<sp/>the<sp/>database<sp/>and<sp/>enter<sp/>details<sp/>of<sp/>the<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>conn<sp/>=<sp/>await<sp/>asyncpg.connect(user=username,<sp/>password=password,<sp/>database=name,<sp/>host=host)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run<sp/>=<sp/><ref refid="classsrc_1_1schema_1_1_run" kindref="compound">Run</ref>(run_name,<sp/>sanity)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run<sp/>=<sp/>await<sp/>db_run_upsert(conn,<sp/>run)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance<sp/>=<sp/><ref refid="classsrc_1_1schema_1_1_instance" kindref="compound">Instance</ref>(run.run_id,<sp/>datetime.now(),<sp/>output_filename,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundary,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance<sp/>=<sp/>await<sp/>db_instance_upsert(conn,<sp/>instance)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">finally</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>await<sp/>conn.close()</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Running<sp/>SoFiA<sp/>in<sp/>a<sp/>subprocess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>execute_sofia:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logging.info(f</highlight><highlight class="stringliteral">&apos;Executing<sp/>SoFiA<sp/>{param_path}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sofia_cmd<sp/>=<sp/>f</highlight><highlight class="stringliteral">&apos;{path}<sp/>{param_path}&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proc<sp/>=<sp/>await<sp/>asyncio.create_subprocess_shell(</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sofia_cmd,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stdout=asyncio.subprocess.PIPE,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stderr=asyncio.subprocess.PIPE,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env={</highlight><highlight class="stringliteral">&apos;SOFIA2_PATH&apos;</highlight><highlight class="normal">:<sp/>os.path.dirname(path)},</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cwd=cwd)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stdout,<sp/>stderr<sp/>=<sp/>await<sp/>proc.communicate()</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance.stdout<sp/>=<sp/>stdout</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance.stderr<sp/>=<sp/>stderr</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance.return_code<sp/>=<sp/>proc.returncode</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Take<sp/>output<sp/>from<sp/>a<sp/>completed<sp/>SoFiA<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>conn<sp/>=<sp/>await<sp/>asyncpg.connect(user=username,<sp/>password=password,<sp/>database=name,<sp/>host=host)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>SoFiA<sp/>completed<sp/>successfully</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>instance.return_code<sp/>==<sp/>0<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>instance.return_code<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logging.info(f</highlight><highlight class="stringliteral">&apos;SoFiA<sp/>completed:<sp/>{param_path}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>await<sp/>merge_match_detection(conn,<sp/>run,<sp/>instance,<sp/>cwd)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Error<sp/>in<sp/>SoFiA<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>f</highlight><highlight class="stringliteral">&apos;SoFiA<sp/>completed<sp/>with<sp/>return<sp/>code:<sp/>{instance.return_code}&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>await<sp/>db_instance_upsert(conn,<sp/>instance)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logging.error(err)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logging.error(instance.stderr)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>no<sp/>source(s)<sp/>found,<sp/>gracefully<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>instance.return_code<sp/>==<sp/>8:</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>SystemError(err)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">finally</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>await<sp/>conn.close()</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">async<sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_main():</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;The<sp/>main<sp/>function<sp/>body.</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>establish<sp/>logger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>root<sp/>=<sp/>logging.getLogger()</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>root.setLevel(logging.DEBUG)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>handler<sp/>=<sp/>logging.StreamHandler(sys.stdout)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.setLevel(logging.DEBUG)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>formatter<sp/>=<sp/>logging.Formatter(</highlight><highlight class="stringliteral">&apos;%(asctime)s<sp/>-<sp/>%(name)s<sp/>-<sp/>%(levelname)s<sp/>-<sp/>%(message)s&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.setFormatter(formatter)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>root.addHandler(handler)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>argument<sp/>parsing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>parser<sp/>=<sp/>argparse.ArgumentParser(description=</highlight><highlight class="stringliteral">&apos;Sofia<sp/>standalone<sp/>execution.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;-c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--conf&apos;</highlight><highlight class="normal">,<sp/>dest=</highlight><highlight class="stringliteral">&apos;conf&apos;</highlight><highlight class="normal">,<sp/>required=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>help=</highlight><highlight class="stringliteral">&apos;configuration<sp/>file&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;-p&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--param&apos;</highlight><highlight class="normal">,<sp/>dest=</highlight><highlight class="stringliteral">&apos;param&apos;</highlight><highlight class="normal">,<sp/>nargs=</highlight><highlight class="stringliteral">&apos;+&apos;</highlight><highlight class="normal">,<sp/>required=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>help=</highlight><highlight class="stringliteral">&apos;SoFiA<sp/>parameter<sp/>file&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>args<sp/>=<sp/>parser.parse_args()</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>information<sp/>from<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>config<sp/>=<sp/>configparser.ConfigParser()</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>config.read(args.conf)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>conf<sp/>=<sp/>config[</highlight><highlight class="stringliteral">&apos;SoFiAX&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>processes<sp/>=<sp/>int(_get_from_conf(conf,<sp/></highlight><highlight class="stringliteral">&apos;sofia_processes&apos;</highlight><highlight class="normal">,<sp/>0))</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>run_name<sp/>=<sp/>_get_from_conf(conf,<sp/></highlight><highlight class="stringliteral">&apos;run_name&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>spatial<sp/>=<sp/>_get_from_conf(conf,<sp/></highlight><highlight class="stringliteral">&apos;spatial_extent&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">).replace(</highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">).split(</highlight><highlight class="stringliteral">&apos;,&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>spectral<sp/>=<sp/>_get_from_conf(conf,<sp/></highlight><highlight class="stringliteral">&apos;spectral_extent&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">).replace(</highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">).split(</highlight><highlight class="stringliteral">&apos;,&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>flux<sp/>=<sp/>int(_get_from_conf(conf,<sp/></highlight><highlight class="stringliteral">&apos;flux&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>uncertainty_sigma<sp/>=<sp/>_get_from_conf(conf,<sp/></highlight><highlight class="stringliteral">&apos;uncertainty_sigma&apos;</highlight><highlight class="normal">,<sp/>5)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>vo_datalink_url<sp/>=<sp/>conf.get(</highlight><highlight class="stringliteral">&apos;vo_datalink_url&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>vo_datalink_url<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Detection.VO_DATALINK_URL<sp/>=<sp/>vo_datalink_url</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>sanity<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;flux&apos;</highlight><highlight class="normal">:<sp/>flux,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;spatial_extent&apos;</highlight><highlight class="normal">:<sp/>tuple(map(int,<sp/>spatial)),</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;spectral_extent&apos;</highlight><highlight class="normal">:<sp/>tuple(map(int,<sp/>spectral)),</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;uncertainty_sigma&apos;</highlight><highlight class="normal">:<sp/>int(uncertainty_sigma)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>Run.check_inputs(sanity)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>task_list<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asyncio.create_task(<ref refid="namespacesrc_1_1sofiax_1a651b74a81a506572fda097c8fa9ed32d" kindref="member">run</ref>(config,<sp/>run_name,<sp/>args.param[0],<sp/>sanity))<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(processes)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>await<sp/>asyncio.gather(*task_list)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>e:</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logging.exception(e)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys.exit(1)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacesrc_1_1sofiax_1a0b60d79d6a0390cab14cbaad6f688a9c" kindref="member">main</ref>():</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Run<sp/>main<sp/>function<sp/>in<sp/>an<sp/>event<sp/>loop.</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>loop<sp/>=<sp/>asyncio.get_event_loop()</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>loop.run_until_complete(_main())</highlight></codeline>
    </programlisting>
    <location file="/Users/she393/Dropbox/projects/RADEC/portal/SoFiAX/src/sofiax.py"/>
  </compounddef>
</doxygen>
